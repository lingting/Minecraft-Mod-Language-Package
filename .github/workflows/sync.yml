name: Sync

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 1"

jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: 'cfpa'

      - name: force sync
        id: fs
        run: |
          git remote add upstream https://github.com/CFPAOrg/Minecraft-Mod-Language-Package.git
          git fetch upstream main
          git fetch origin cfpa
          git reset --hard upstream/main
          # 有输出则说明有更新, 后续步骤需要推送然后提交pr
          git diff --quiet origin/cfpa || hasDiff=true
          echo "hasDiff="$hasDiff >> $GITHUB_OUTPUT
          echo "hasDiff="$hasDiff

      - name: cpr
        id: cpr
        if: steps.fs.outputs.hasDiff == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          git push origin cfpa
          # 获取当前仓库的完整名称（owner/repo）
          REPO=$(echo "${{ github.repository }}" | sed 's/\\//g')
          # 准备请求体，包含标题、描述等信息
          BODY="{\"title\":\"Auto-PR: Changes from cfpa to main\",\"head\":\"cfpa\",\"base\":\"main\",\"body\":\"This PR is created by GitHub Actions.\"}" 
          # 使用curl发起POST请求到GitHub API创建PR
          PR_RESPONSE=$(curl --silent --header "Authorization: Bearer $GITHUB_TOKEN" \
            --header 'Content-Type: application/json' \
            --data "$BODY" \
            https://api.github.com/repos/$REPO/pulls)
          # 提取PR ID
          PR_ID=$(echo "$PR_RESPONSE" | jq -r .number)
          # 检查PR_ID是否为null
          if [ "$PR_ID" == "null" ]; then
            echo "Error: Failed to create Pull Request, received null as PR ID."
            exit 1  # 终止步骤执行，并标记此步骤为失败
          else
            # 输出PR ID到Actions日志
            echo "Created Pull Request with ID: $PR_ID"
            # 合并pr的请求提
            MERGE_BODY="{\"merge_method\":\"merge\"}"
            MERGE_RESPONSE=$(curl --silent --header "Authorization: Bearer $GITHUB_TOKEN" \
              --header 'Content-Type: application/json' \
              --data "$MERGE_BODY" \
              -X PUT \
              https://api.github.com/repos/$REPO/pulls/$PR_ID/merge)
            MERGED = $(echo "$MERGE_RESPONSE" | jq -r .merged)
            echo "Merge flag: $MERGED"
            if [ "$MERGED" != "true" ]; then
              echo "Merge not successful, exiting the job."
              exit 1
            fi
          fi
